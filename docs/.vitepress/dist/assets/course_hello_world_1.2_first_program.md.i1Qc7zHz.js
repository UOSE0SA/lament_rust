import{_ as a,c as i,o as t,ae as e}from"./chunks/framework.C7kf6YPw.js";const u=JSON.parse('{"title":"1.2 第一个程序","description":"","frontmatter":{},"headers":[],"relativePath":"course/hello_world/1.2_first_program.md","filePath":"course/hello_world/1.2_first_program.md"}'),l={name:"course/hello_world/1.2_first_program.md"};function p(n,s,o,r,d,h){return t(),i("div",null,s[0]||(s[0]=[e(`<h1 id="_1-2-第一个程序" tabindex="-1">1.2 第一个程序 <a class="header-anchor" href="#_1-2-第一个程序" aria-label="Permalink to &quot;1.2 第一个程序&quot;">​</a></h1><blockquote><p>本文仅概述第一个程序的具体写法，不完全讲解具体内容。</p></blockquote><p>恭喜你，成功的迈入了Rust的第一道小坎，接下来我们将会使用Rust IDE进行编写简单的Rust程序，并编译运行它。</p><p>以下是一个简单的Rust程序:</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p></p><h6 id="源文件" tabindex="-1">源文件 <a class="header-anchor" href="#源文件" aria-label="Permalink to &quot;源文件&quot;">​</a></h6><p>Zip File: <a href="../src/hello_world/1.2/zip/first_program.zip" download><strong>点击我下载</strong></a></p><p>Markdown Link: <a href="/lament_rust/src/hello_world/1.2/md/first_program.html">Markdown</a></p></div><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  println!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>将它复制到你的Rust编辑器中，并<a href="/lament_rust/appendix/1.open_cmd.html">打开终端</a>，在终端中输入</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cargo build</span></span></code></pre></div><p>编译成功后输入</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cargo run</span></span></code></pre></div><p>开始运行，接下来，你应该在屏幕上看到了这样的话：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Hello, world!</span></span></code></pre></div><p>&quot;Hello, world!&quot; 是编程的经典起点，象征从零到一的突破。它简单却意义深远——验证环境、理解基础语法，并带来首次代码成功的喜悦。无论是初学者还是老手，它始终是技术探索的第一步。</p><p>其实这个就是你在上一段代码中看到的</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>它的作用就是在屏幕上打印Hello, world!，也就是双引号内的内容。</p><h2 id="习题练习" tabindex="-1">习题练习 <a class="header-anchor" href="#习题练习" aria-label="Permalink to &quot;习题练习&quot;">​</a></h2><ol><li>尝试修改<code>println!(&quot;Hello, world!&quot;);</code>的部分内容，使其在屏幕中打印Rust。</li><li>修改程序后重新进行编译并运行，查看输出结果。</li><li>对这段代码增加注释。</li></ol>`,18)]))}const k=a(l,[["render",p]]);export{u as __pageData,k as default};
